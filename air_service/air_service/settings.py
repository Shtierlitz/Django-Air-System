# air_service/settings.py
"""
Django settings for air_service project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DEBUG = bool(int(os.environ.get('DEBUG', default=1)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

SECRET_KEY = os.environ.get('SECRET_KEY')
# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')
RECIPIENTS_EMAIL = os.environ.get('RECIPIENTS_EMAIL')

# docker database specifics
# type False to run in local machine without docker or to run tests
USE_POSTGRES = False

try:
    from .local_settings import *   # undo comment in .dockerignore if you want to start container localy
except ImportError:
    from .prod_settings import *



# Application definition

INSTALLED_APPS = [
    # websocket
    'channels',
    'daphne',
    # system
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'flights.apps.FlightsConfig',
    # social login
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    # forms
    'crispy_forms',
    "crispy_bootstrap5",
    'widget_tweaks',
    # celery
    'django_celery_beat',
    'django_celery_results',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',
]

ROOT_URLCONF = 'air_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'flights/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'air_service.wsgi.application'
ASGI_APPLICATION = "air_service.asgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Kiev'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "flights.User"
LOGIN_REDIRECT_URL = 'home'

SITE_ID = 1
# ACCOUNT_EMAIL_VERIFICATION = 'none'  # Подтверждение email не требуется
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Аутентификация по имени пользователя или email
ACCOUNT_EMAIL_REQUIRED = True  # Требование email для всех пользователей
SOCIALACCOUNT_AUTO_SIGNUP = False  # Разрешить создание новых пользователей во время аутентификации
SOCIALACCOUNT_QUERY_EMAIL = True  # Запрос email у Google
SOCIALACCOUNT_STORE_TOKENS = True  # Сохранять токены доступа и обновления
ACCOUNT_USERNAME_REQUIRED = True
# ACCOUNT_UNIQUE_EMAIL = False
ACCOUNT_SIGNUP_REDIRECT_URL = "home"
SOCIALACCOUNT_FORMS  = {'signup': 'flights.forms.GoogleSignUpForm'}

ACCOUNT_SIGNUP_TEMPLATE = 'registration/signup.html'
# ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('CLIENT_ID'),
            'secret': os.environ.get('CLIENT_SECRET'),
            'key': ''
        }
    },
}

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

STRIPE_PUBLICK_KEY = "pk_test_51MwUgUJhy2cy90iNKj5iKkjkcmbB3cRTdxcb7kUMPHweOF5UbO4GMdTAXM4ZPc94eVdJ4DrmprmMXpM7cayIpVBi00VJqZ5pP4"
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET')
STRIPE_WEBHOOK_SECRET = ''

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379) if USE_POSTGRES else ("127.0.0.1", 6379)],
        },
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'channels': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'daphne': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}